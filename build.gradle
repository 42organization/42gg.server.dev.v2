plugins {
	id 'org.springframework.boot' version '2.6.8'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'java'
	id 'jacoco'
}

springBoot {
	mainClass = "com.gg.server.Application"
}

group = 'io.42pp'
version = '42gg'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	/* spring */
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	/* database */
	runtimeOnly 'mysql:mysql-connector-java'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	/* redis */
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'org.redisson:redisson:3.17.3'

	/* oauth */
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	/* JSON Web Token */
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	/* test */
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	/* lombok */
	implementation 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'

	/* SHA256 */
	implementation 'com.google.guava:guava:31.0.1-jre'

	/* When..? Error */
	implementation 'org.apache.commons:commons-lang3:3.12.0'

	/* REST template */
	implementation 'org.apache.httpcomponents:httpcore:4.4.15'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'

	/* S3 Image Bucket */
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'org.springframework:spring-test:5.3.20'
	implementation "com.amazonaws:aws-java-sdk-s3:1.12.281"

	testImplementation 'org.springframework.security:spring-security-test'

	//test에서 lombok 사용
	testImplementation 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	/* spring doc */
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'

	/* flyway */
	implementation 'org.flywaydb:flyway-core'

	/* elk-logstash */
	implementation 'net.logstash.logback:logstash-logback-encoder:6.3'

	//actuator 추가
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//prometheus 추가
	implementation 'io.micrometer:micrometer-registry-prometheus'

	//testcontainers 추가
	testImplementation "org.testcontainers:mysql:1.19.3"
	testImplementation "com.redis:testcontainers-redis:2.0.1"
	testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
	testImplementation "org.testcontainers:testcontainers:1.19.3"
	testImplementation "org.testcontainers:junit-jupiter:1.19.3"
}

//테스트 커버리지 측정도구
jacoco {
	toolVersion = "0.8.5"
}

//커버리지 리포트 생성
jacocoTestReport {
	reports {
		xml.enabled false
		html.enabled true
		csv.enabled true
	}

	afterEvaluate {
		//dto 및 외부 연동 서비스는 테스트에서 제외
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
							'*Application*',
							"**/config/*",
							"**/security/*",
							"**/dto/*",
							"**/aws/*",
							"*NotiMailSender*",
							'*SlackbotService*'
					]
			)
		}))
	}
}

// 커버리지 검증 설정
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			//브랜치 커버리지
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			//라인 커버리지
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			//검증에서 제외할 패키지, 클래스 설정
			excludes = [
					'*Application*',
					"**/config/*",
					"**/security/*",
					"**/dto/*",
					"**/aws/*",
					"*NotiMailSender*",
					'*SlackbotService*',
			]
		}
	}
}

test {
	useJUnitPlatform()
}

//jacocoTestReport 는 jacocoTestCoverageVerification 이후에 실행되도록 설정
task testCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}